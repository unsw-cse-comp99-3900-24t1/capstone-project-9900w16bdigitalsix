definitions:
  forms.ChangePasswordForm:
    properties:
      email:
        type: string
      new_password:
        type: string
      old_password:
        type: string
    required:
    - email
    - new_password
    - old_password
    type: object
  forms.CreateTeamForm:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  forms.JoinTeamForm:
    properties:
      teamId:
        type: integer
      userId:
        type: integer
    required:
    - teamId
    - userId
    type: object
  forms.PasswordLoginForm:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  forms.Profile:
    properties:
      bio:
        type: string
      field:
        type: string
      name:
        type: string
      organization:
        type: string
      position:
        type: string
      skills:
        items:
          type: string
        type: array
      userId:
        type: integer
    type: object
  forms.ProfileRequest:
    properties:
      profile:
        $ref: '#/definitions/forms.Profile'
    required:
    - profile
    type: object
  forms.RegisterForm:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 3
        type: string
      password_confirm:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - password_confirm
    - username
    type: object
  forms.ResetPasswordForm:
    properties:
      new_password:
        type: string
      new_password_confirm:
        type: string
      token:
        type: string
    required:
    - new_password
    - new_password_confirm
    - token
    type: object
  forms.SendEmailResetPwdForm:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  forms.UpdateTeamProfileForm:
    properties:
      TeamSkills:
        items:
          type: string
        type: array
      teamName:
        type: string
    type: object
  response.CreateTeamResponse:
    properties:
      teamId:
        type: integer
      teamMember:
        items:
          $ref: '#/definitions/response.TeamMember'
        type: array
      teamName:
        type: string
    type: object
  response.GetTeamProfileResponse:
    properties:
      teamId:
        type: integer
      teamMember:
        items:
          $ref: '#/definitions/response.TeamMember'
        type: array
      teamName:
        type: string
      teamSkills:
        items:
          type: string
        type: array
    type: object
  response.JoinTeamResponse:
    properties:
      teamId:
        type: integer
      teamMember:
        items:
          $ref: '#/definitions/response.TeamMember'
        type: array
      teamName:
        type: string
      teamSkills:
        items:
          type: string
        type: array
    type: object
  response.ProfileResponse:
    properties:
      bio:
        type: string
      email:
        type: string
      field:
        type: string
      name:
        type: string
      organization:
        type: string
      position:
        type: string
      skills:
        items:
          type: string
        type: array
      userId:
        type: integer
    type: object
  response.StudentInfoResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  response.StudentListResponse:
    properties:
      email:
        type: string
      userId:
        type: integer
      userName:
        type: string
    type: object
  response.TeamListResponse:
    properties:
      teamId:
        type: integer
      teamName:
        type: string
    type: object
  response.TeamMember:
    properties:
      email:
        type: string
      userId:
        type: integer
      userName:
        type: string
      userSkills:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /v1/team/create:
    post:
      consumes:
      - application/json
      description: 创建 team, 并且创建人加入了 team, 后端随机生成 teamName, 存入了数据库
      parameters:
      - description: Create Team form
        in: body
        name: createTeamForm
        required: true
        schema:
          $ref: '#/definitions/forms.CreateTeamForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateTeamResponse'
        "400":
          description: '{"error":"User already belongs to a team, cannot create team"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error":"User not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to create team"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new team
      tags:
      - Team
  /v1/team/get/list:
    get:
      consumes:
      - application/json
      description: Get all teams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.TeamListResponse'
            type: array
        "500":
          description: '{"error": "Failed to fetch teams"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Team List
      tags:
      - Team
  /v1/team/get/student-info/{teamName}:
    get:
      consumes:
      - application/json
      description: Get student list information by team name
      parameters:
      - description: Team Name
        in: path
        name: teamName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.StudentInfoResponse'
            type: array
        "404":
          description: '{"error": "Team not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get student list information by team name
      tags:
      - Team
  /v1/team/invite/{userId}/{teamId}:
    get:
      consumes:
      - application/json
      description: Invite a student to join a team
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "User invited to team successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error": "User already belongs to a team"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error": "User not found"} or gin.H{"error": "Team not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Failed to invite user to team"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Invite User to Team
      tags:
      - Team
  /v1/team/join:
    put:
      consumes:
      - application/json
      description: 用户加入团队
      parameters:
      - description: Join Team form
        in: body
        name: joinTeamForm
        required: true
        schema:
          $ref: '#/definitions/forms.JoinTeamForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JoinTeamResponse'
        "400":
          description: '{"error": "User already belongs to a team"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error":"Team not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to update team"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Join a team
      tags:
      - Team
  /v1/team/leave/{userId}:
    delete:
      consumes:
      - application/json
      description: 用户离开团队
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"User has left the team successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error":"User does not belong to any team"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error":"User not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to update user"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Leave a team
      tags:
      - Team
  /v1/team/profile/{userId}:
    get:
      consumes:
      - application/json
      description: 获取用户所属团队的信息
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTeamProfileResponse'
        "404":
          description: '{"error":"Team not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Team Profile
      tags:
      - Team
  /v1/team/update/profile/{teamId}:
    put:
      consumes:
      - application/json
      description: 更新团队的资料和技能
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Update Team Profile form
        in: body
        name: updateTeamProfileForm
        required: true
        schema:
          $ref: '#/definitions/forms.UpdateTeamProfileForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"Updated team profile successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error":"Validation failed"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error":"Team not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to update team profile"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update Team Profile
      tags:
      - Team
  /v1/user/change_password:
    post:
      consumes:
      - application/json
      description: 修改用户密码
      parameters:
      - description: Change Password form
        in: body
        name: changePasswordForm
        required: true
        schema:
          $ref: '#/definitions/forms.ChangePasswordForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"Password updated successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"password":"原始密码不对"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"email":"用户不存在"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to connect to user service"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Change Password
      tags:
      - User
  /v1/user/forget_password/send_email:
    post:
      consumes:
      - application/json
      description: 发送重置密码邮件
      parameters:
      - description: Reset Password form
        in: body
        name: sendEmailResetPwdForm
        required: true
        schema:
          $ref: '#/definitions/forms.SendEmailResetPwdForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"Reset password email sent successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error":"Validation failed"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error": "User not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to send reset password email"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send reset password email
      tags:
      - User
  /v1/user/modify/profile:
    post:
      consumes:
      - application/json
      description: 更新用户个人信息和技能
      parameters:
      - description: Profile Request
        in: body
        name: profileReq
        required: true
        schema:
          $ref: '#/definitions/forms.ProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"User profile updated successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error":"Validation failed"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error":"User not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to update user profile"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update User Profile
      tags:
      - User
  /v1/user/profile/{user_id}:
    get:
      consumes:
      - application/json
      description: 获取用户个人信息
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProfileResponse'
        "404":
          description: '{"error":"User not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get User Profile
      tags:
      - User
  /v1/user/pwd_login:
    post:
      consumes:
      - application/json
      description: 用户通过密码登录
      parameters:
      - description: Login form
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/forms.PasswordLoginForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"id":1,"username":"user","token":"xxx","expires_at":1234567890}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"email":"用户不存在"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"内部错误"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: 密码登陆
      tags:
      - User
  /v1/user/register/send_email:
    post:
      consumes:
      - application/json
      description: 用户注册，发送验证邮件
      parameters:
      - description: Register form
        in: body
        name: registerForm
        required: true
        schema:
          $ref: '#/definitions/forms.RegisterForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"Verification email sent successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error":"Validation failed"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: '{"error": "User already exists"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to send verification email"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: 用户注册 （发送邮件）
      tags:
      - User
  /v1/user/register/verify:
    get:
      consumes:
      - application/json
      description: 验证邮箱，并完成用户注册
      parameters:
      - description: Verification Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"注册成功"}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: '{"error":"Invalid or expired token"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to verify token"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: 用户注册 (验证邮箱)
      tags:
      - User
  /v1/user/reset/password:
    post:
      consumes:
      - application/json
      description: 重置用户密码
      parameters:
      - description: Reset Password form
        in: body
        name: resetPasswordForm
        required: true
        schema:
          $ref: '#/definitions/forms.ResetPasswordForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"msg":"Password reset successfully"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error":"Invalid or expired token"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to reset password"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset Password
      tags:
      - User
  /v1/user/student/list:
    get:
      consumes:
      - application/json
      description: 返回所有学生列表， 注意 users 表格里面有 Role 字段， 1表示student, 2表示tutor, 3表示client,
        4表示convenor, 5表示admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.StudentListResponse'
            type: array
        "500":
          description: '{"error": "Failed to fetch users"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Student List
      tags:
      - User
swagger: "2.0"
